Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/19/16 14:20:35
Program 5    (program5.asm				     Page 1 - 1


				TITLE Program 5    (program5.asm)

				; Author: Alexander Laquitara
				; Course / Project ID                 Date: 11/20/2016
				; Description:  This program gets a number from the user that determines how many random numbers will fill an array.
								;Program then lists the values in the array in unsorted order, sorts the values in the array, displays the median
								;then displays the sorted list. 


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 = 0000000A			MIN = 10
 = 000000C8			MAX = 200
 = 00000064			LO = 100
 = 000003E7			HI = 999

 00000000			.data
 00000000 53 6F 72 74 69	intro_1		BYTE	"Sorting Random numbers    Programmed by Alex Laquitara", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 20 20
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   41 6C 65 78 20
	   4C 61 71 75 69
	   74 61 72 61 00
 00000037 54 68 69 73 20	intro_2		BYTE	"This program generates random numbers in the range [100 .. 999]", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 00
 00000077 64 69 73 70 6C	intro_3		BYTE	"displays the original list, sorts the list, and calculates the median value.", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2E 00
 000000C4 46 69 6E 61 6C	intro_4		BYTE	"Finally, it displays the list sorted in descending order", 0
	   6C 79 2C 20 69
	   74 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 00
 000000FD 4F 75 74 20 6F	range		BYTE	"Out of range.  Enter a number between 10 and 200", 0
	   66 20 72 61 6E
	   67 65 2E 20 20
	   45 6E 74 65 72
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 31 30
	   20 61 6E 64 20
	   32 30 30 00
 0000012E 48 6F 77 20 6D	howMany		BYTE	"How many numbers should be generated? [10 .. 200]",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 00
 00000160 49 6E 76 61 6C	error1		BYTE	"Invalid input", 0
	   69 64 20 69 6E
	   70 75 74 00
 0000016E 54 68 65 20 75	nums		BYTE	"The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
 0000018B 54 68 65 20 6D	medPrint	BYTE	"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000019A 54 68 65 20 73	sortPrint	BYTE	"The sorted list: ",0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 000001AC 20 20 20 20 20	spacer		BYTE	"     ", 0			;5 spaces for formatting output
	   00
 000001B2 00000000		userNum		DWORD	?					;amount of random numbers in the array
 000001B6  000000C8 [		ray			DWORD	MAX DUP(?)			;Array to hold random numbers
	    00000000
	   ]

 00000000			.code
				; Procedure: Main
				; like the c++main function, the main procedure calls the program procedures
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: none
 00000000			main PROC

 00000000  E8 00000000 E		call	Randomize	;procedure to seed random numbers
 00000005  E8 0000006B			call	greating
 0000000A  68 000001B2 R		push	OFFSET usernum

					;get data from user
 0000000F  E8 0000009E			call	getData
 00000014  FF 35 000001B2 R		push	usernum 
 0000001A  68 000001B6 R		push	OFFSET ray
 0000001F  E8 000000CF			call	rayFill
 00000024  68 000001B6 R		push	OFFSET	ray

					;display unsorted array
 00000029  FF 35 000001B2 R		push	usernum
 0000002F  68 0000016E R		push	OFFSET	nums
 00000034  E8 000000DF			call	loglist
					
					;sort array
 00000039  68 000001B6 R		push	OFFSET ray
 0000003E  FF 35 000001B2 R		push	usernum
 00000044  E8 0000011D			call	sort

					;median 
 00000049  68 000001B6 R		push	OFFSET ray
 0000004E  FF 35 000001B2 R		push	userNum
 00000054  E8 00000130			call	logMed
					
					;display sorted array
 00000059  68 000001B6 R		push	OFFSET ray
 0000005E  FF 35 000001B2 R		push	usernum
 00000064  68 0000019A R		push	OFFSET	sortPrint
 00000069  E8 000000AA			call	loglist

					exit	; exit to operating system
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP


				; Procedure: greating
				; Displays a greeting, the program title, author name, and program description
				; receives: intro_1,2,3, 4 are global variables
				; returns: logs the greeting, program title, author name, and program description to console
				; preconditions: none
				; Registers Changed:  edx to display intro strings
 00000075			greating PROC
 00000075  BA 00000000 R		mov		edx,  OFFSET intro_1
 0000007A  E8 00000000 E		call	WriteString
 0000007F  E8 00000000 E		call	CrLF
 00000084  BA 00000037 R		mov		edx,	OFFSET intro_2
 00000089  E8 00000000 E		call	WriteString
 0000008E  E8 00000000 E		call	CrLF
 00000093  BA 00000077 R		mov		edx,	OFFSET intro_3
 00000098  E8 00000000 E		call	WriteString
 0000009D  E8 00000000 E		call	CrLF
 000000A2  BA 000000C4 R		mov		edx,	OFFSET intro_4
 000000A7  E8 00000000 E		call	WriteString
 000000AC  E8 00000000 E		call	CrLF
 000000B1  C3				ret
 000000B2			greating ENDP

				; Procedure : getData
				; Prompts the user for input and validates that input is in range
				; receives: usernum by reference
				; returns: none
				; precontions: none
				; registers changed: EDX EAX EBP
 000000B2			getData PROC
 000000B2				get:
 000000B2  55					push	ebp
 000000B3  8B EC				mov		ebp, esp			;setup stack frame
 000000B5  8B 5D 08				mov		ebx, [ebp+8]		;ebx points to request +4 

 000000B8  BA 0000012E R			mov		edx,	OFFSET howMany
 000000BD  E8 00000000 E			call	WriteString
 000000C2  E8 00000000 E			call	ReadInt

 000000C7  83 F8 0A				cmp		eax, MIN			;checks that greater than min global
 000000CA  7D 02				jge		over		
 000000CC  7C 09				jl		invalid

 000000CE				over:	;if over
 000000CE  3D 000000C8				cmp		eax, MAX
 000000D3  7F 02				jg		invalid
 000000D5  EB 11				jmp		valid

 000000D7				invalid:		;if invalid
 000000D7  BA 000000FD R			mov		edx,	OFFSET	range
 000000DC  E8 00000000 E			call	WriteString
 000000E1  E8 00000000 E			call	CrLF
 000000E6  EB CA				jmp		get					;start over again
 000000E8				valid:
 000000E8  89 03				mov		[ebx],	eax			;usernum is stored in ebx
 000000EA  5D					pop		ebp					;set stack to how it was
 000000EB  E8 00000000 E			call	CrLF
 000000F0  C2 0004				ret		4
 000000F3			getData ENDP

				; Procedure : rayFill
				; stores random integer values from [100...999] in an array
				; receives: ray - reference   and usernum - value
				; returns: none
				; precontions: usernum must be validated and ray defined
				; registers changed: EDX EBP ECX EBX ESI
 000000F3			rayFill PROC
 000000F3  55					push	ebp	
 000000F4  8B EC				mov		ebp, esp
 000000F6  8B 4D 0C				mov		ecx,	[ebp+12]
 000000F9  8B 75 08				mov		esi,	[ebp+8]

 000000FC  B8 000003E7				mov		eax,	HI
 00000101  83 E8 64				sub		eax,	LO
 00000104  40					inc		eax

 00000105				fill:
 00000105  E8 00000000 E			call	RandomRange
 0000010A  83 C0 64				add		eax,	LO
 0000010D  89 06				mov		[esi], eax
 0000010F  83 C6 04				add		esi,	4
 00000112  E2 F1				loop	fill

 00000114  5D					pop		ebp
 00000115  C2 0008				ret		8
 00000118			rayFIll	ENDP

				; Procedure : logList
				; Prints the contents of an array of integers to console
				; receives: ray-reference and request-value
				; returns: none
				; precontions: ray and usernum must hold values
				; registers changed: EDX EAX ESI EBX EBP
 00000118			logList PROC
						;refereneced DEMO5.ASM
 00000118  55					push ebp						;push old ebp, +4
 00000119  8B EC				mov ebp, esp					;set stack frame pointer
 0000011B  8B 75 10				mov esi, [ebp+16]				;address of array in esi
													;since we push 3 parameters, this is now +16 instead of +12
 0000011E  8B 4D 0C				mov ecx, [ebp+12]				;number of elements in ecx (counter)
 00000121  BB 00000000				mov ebx, 0						;count per line

					;Title Display
 00000126  E8 00000000 E			call CrLf
 0000012B  8B 55 08				mov edx, [ebp + 8]			;since this was last pushed on stack
 0000012E  E8 00000000 E			call WriteString
 00000133  E8 00000000 E			call CrLf

 00000138				cur:
 00000138  83 FB 0A				cmp ebx, MIN				;must be at beginning so value outside of range is not displayed
 0000013B  74 19				je next					;if 10 values have been displayed, jump to next row

 0000013D  8B 06				mov eax, [esi]				;current element in eax
 0000013F  E8 00000000 E			call WriteDec

 00000144  83 C6 04				add esi, 4					;go to next element
 00000147  BA 000001AC R			mov edx, OFFSET spacer		;print spacing between values
 0000014C  E8 00000000 E			call WriteString
 00000151  43					inc ebx
 00000152  E2 E4				loop cur			;loop again
 00000154  EB 0C				jmp ending				;once ecx = 0, no more loop, skip over to finished

 00000156				next:
 00000156  E8 00000000 E			call CrLf
 0000015B  BB 00000000				mov ebx, 0
 00000160  EB D6				jmp cur

 00000162				ending:
 00000162  5D					pop ebp						;restore stack
 00000163  C2 000C				ret 12						;return bytes pushed before the call

 00000166			logList ENDP


				; Procedure : sort
				; Sorts an array of integers.
				; receives: ray and usernum 
				; returns: none
				; precontions: ray and usernum must hold values
				; registers changed: EDX EAX ESI EBX EBP
 00000166			sort PROC
					
					;Page 352 Irvine's bubble sort
 00000166  55					push	ebp
 00000167  8B EC				mov		ebp,	esp
 00000169  8B 4D 08				mov		ecx,	[ebp+8]
 0000016C  49					dec		ecx				;Dec count by 1

 0000016D				L1:
 0000016D  51					push	ecx					;outer loop count saved
 0000016E  8B 75 0C				mov		esi,	 [ebp+12]	;point to first value

 00000171				L2:
 00000171  8B 06				mov		eax,	[esi]
 00000173  39 46 04				cmp		[esi+4],	eax		;comparing current element to the n+1
 00000176  7C 05				jl		L3
 00000178  87 46 04				xchg	eax,	[esi+4]    ;reference for swap http://www.c-jump.com/CIS77/ASM/DataTypes/T77_0200_exchanging_integers.htm
 0000017B  89 06				mov		[esi],	eax

 0000017D				L3:
 0000017D  83 C6 04				add		esi,	4			;point to next element and repeat the loops
 00000180  E2 EF				loop	L2
 00000182  59					pop		ecx					;retrieves out loop content
 00000183  E2 E8				loop	L1					

 00000185  5D				pop		ebp
 00000186  C2 0008			ret		8

 00000189			sort ENDP


				; Procedure : logMed
				; Logs the median number in an arry.  Median number is the middle value if usernum is odd, average of middle two if usernum is even
				; receives: ray and usernum 
				; returns: Median value of array
				; precontions: ray must be sorted 
				; registers changed: EDX EAX ESI EBX EBP
 00000189			logMed	PROC
 00000189  55					push	ebp
 0000018A  8B EC				mov		ebp,	esp
 0000018C  8B 75 0C				mov		esi,	[ebp +12]
 0000018F  8B 4D 08				mov		ecx,	[ebp+8]
 00000192  BA 00000000				mov		edx,	0		;clear for division


 00000197  8B C1				mov		eax, ecx		;elements sent to eax
 00000199  B9 00000002				mov		ecx,	2
 0000019E  F7 F1				div		ecx
 000001A0  83 FA 00				cmp		edx,	0		;If remaineder is 1 its odd, even is 0
 000001A3  77 02				ja		odds
 000001A5  74 0E				je		evens
					
 000001A7				odds:						;finds middle number in array
 000001A7  BB 00000004				mov		ebx,	4
 000001AC  F7 E3				mul		ebx
 000001AE  8B 1C 30				mov		ebx,	[esi+eax]
 000001B1  8B C3				mov		eax,	ebx
 000001B3  EB 1B				jmp		endMed

 000001B5				evens:						;finds average of middle two numbers in array
 000001B5  BB 00000004				mov		ebx,	4
 000001BA  F7 E3				mul		ebx
 000001BC  8B 1C 30				mov		ebx,	[esi+eax]

 000001BF  83 E8 04				sub		eax,	4
 000001C2  8B 04 30				mov		eax,	[esi+eax]
 000001C5  03 C3				add		eax,	ebx
 000001C7  BB 00000002				mov		ebx,	2
 000001CC  F7 F3				div		ebx
 000001CE  EB 00				jmp		endMed
					
 000001D0				endMed:						;Once median is found it is logged and stack is set
 000001D0  BA 0000018B R			mov		edx,	OFFSET medPrint
 000001D5  E8 00000000 E			call	CrLf
 000001DA  E8 00000000 E			call	CrLf
 000001DF  E8 00000000 E			call	WriteString
 000001E4  E8 00000000 E			call	WriteDec
 000001E9  E8 00000000 E			call	CrLF
 000001EE  5D					pop		ebp
 000001EF  C2 0008				ret		8
 000001F2			logMed ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/19/16 14:20:35
Program 5    (program5.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004D6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getData  . . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000041 Public STDCALL
  get  . . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  over . . . . . . . . . . . . .	L Near	 000000CE _TEXT	
  invalid  . . . . . . . . . . .	L Near	 000000D7 _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000E8 _TEXT	
greating . . . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 0000003D Public STDCALL
logList  . . . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 0000004E Public STDCALL
  cur  . . . . . . . . . . . . .	L Near	 00000138 _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000156 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000162 _TEXT	
logMed . . . . . . . . . . . . .	P Near	 00000189 _TEXT	Length= 00000069 Public STDCALL
  odds . . . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  evens  . . . . . . . . . . . .	L Near	 000001B5 _TEXT	
  endMed . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
rayFill  . . . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000025 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 00000105 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sort . . . . . . . . . . . . . .	P Near	 00000166 _TEXT	Length= 00000023 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000016D _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000171 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000017D _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error1 . . . . . . . . . . . . .	Byte	 00000160 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
howMany  . . . . . . . . . . . .	Byte	 0000012E _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000037 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 00000077 _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000000C4 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medPrint . . . . . . . . . . . .	Byte	 0000018B _DATA	
nums . . . . . . . . . . . . . .	Byte	 0000016E _DATA	
range  . . . . . . . . . . . . .	Byte	 000000FD _DATA	
ray  . . . . . . . . . . . . . .	DWord	 000001B6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortPrint  . . . . . . . . . . .	Byte	 0000019A _DATA	
spacer . . . . . . . . . . . . .	Byte	 000001AC _DATA	
userNum  . . . . . . . . . . . .	DWord	 000001B2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
